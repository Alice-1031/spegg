usage="\$(basename "$CustomSpeggMakefileGenerator") [--help] [--spegg_directory=<string>] [--local_headers=<string>] [--custome_code_path=<string>] -- script to generate a Makefile for the user's customized spegg code. This will create an executable, based on the code generated by the user. It assumes the user has not modified the default paths of the sPEGG core files.\n

where:\n
\t   --help show this help text\n
\t   --spegg_directory  set the spegg codebase directory\n
\t   --local_headers the directories of the headers to be specified in the Makefile
\t   --custom_code_path the directory where the customized sPEGG code is located 
\t   --lconfig_path shared object location "	

# Take in the arguments to identify the directory where the model and the core spegg file are located: following CDMO's answer in http://unix.stackexchange.com/questions/129391/passing-named-arguments-to-shell-scripts:
while [ $# -gt 0 ]; do
  case "$1" in
    --local_headers=*)
      local_headers="${1#*=}"
      ;;
    --spegg_directory=*)
      spegg_directory="${1#*=}"
      ;;
    --custom_code_path=*)
      custom_code_path="${1#*=}"
      ;;
    --lconfig_path=*)
      lconfig_path="${1#*=}"
      ;;
    --help)
	echo -e ${usage}
	exit 1
      ;;
    *)
      printf "***************************\n"
      printf "* Error: Invalid argument.*\n"
      printf "***************************\n"
      exit 1
  esac
  shift
done
HEADERS=$local_headers

# Look for additional header files, just in case the user stored this in a directory other than header/ in custom_code_path:
CUSTOM_HEADERS=($(find $custom_code_path -type f -name "*.h"))
HEADER_DIRECTORIES=()
num_headers=${#CUSTOM_HEADERS[@]}
for ((i=0;i<num_headers;i++));
do
	directoryname=$(dirname "${CUSTOM_HEADERS[i]}")
	HEADER_DIRECTORIES+=($directoryname)
done

for ((i=0;i<${#HEADER_DIRECTORIES[@]};i++));
do
	HEADERS+=" -I"${HEADER_DIRECTORIES[i]}
done

# Remove potentially duplicate entries. First, clear the 'HEADERS =' prefix from the string HEADERS
prefix="HEADERS = "
HEADERS=${HEADERS#$prefix}

# then, record only the unique elements of the string following http://stackoverflow.com/questions/16623835/bash-remove-a-fixed-prefix-suffix-from-a-string
declare -A uniq
for k in $HEADERS ; do uniq[$k]=1 ; done
HEADERS=$prefix${!uniq[@]}

## Seach the customized code path for all the cpp and cu files, and store those in an array SRC_FILES:
CODE_FILES=$(find $custom_code_path -type f -name "*.cu")
CODE_FILES+=" "
CODE_FILES+=$(find $custom_code_path -type f -name "*.cpp")

SRC_FILES=($CODE_FILES)
num_files=${#SRC_FILES[@]}

# Convert to .o files
OBJDIR_FILES=($CODE_FILES)
for ((i=0;i<num_files;i++));
do
	filename=$(basename "${SRC_FILES[i]}")
	filename=${filename/.cu/.o}
	filename=${filename/.cpp/.o}
	OBJDIR_FILES[i]=$filename
	OBJDIR_FILES[i]="\$(OBJDIR)/"${OBJDIR_FILES[i]}
done
# Concatenate the array into a string
compileList=${OBJDIR_FILES[*]// / }

# Convert to build instructions
BUILD_FILES=($CODE_FILES)
for ((i=0;i<num_files;i++));
do
	# line 1.
	BUILD_FILES[i]="tempMarker"${OBJDIR_FILES[i]}" : "${SRC_FILES[i]}
	# line 2.
	BUILD_FILES[i]+="\n\t nvcc -c \$(CFLAGS) \${HEADERS} ${SRC_FILES[i]} -o "${OBJDIR_FILES[i]}
done
# Concatenate the array into a string
buildList=$(echo -e ${BUILD_FILES[*]//tempMarker/\\n})

cat <<EOF > Draft_Makefile_custom_model
$HEADERS

CFLAGS = -O3
CFLAGS += -arch=sm_30

OBJDIR_SPEGG = $spegg_directory/objdir
OBJDIR = objdir

all: \$(OBJDIR_SPEGG) \$(OBJDIR) spegg_simulation

LINKFLAG = -L${lconfig_path//":"/" -L"}
RPATH_VAR = $lconfig_path:/usr/local/cuda/lib64

spegg_simulation : \$(OBJDIR_SPEGG)/*.o $compileList
	nvcc -o spegg_simulation \$(LINKFLAG) -O3 -lcurand -lcuda -lconfig++ \$(OBJDIR_SPEGG)/*.o $compileList -Xlinker -rpath,\$(RPATH_VAR)

\$(OBJDIR):
	mkdir \$(OBJDIR)

$buildList

.PHONY : all clean
clean :
	@rm -rf \$(OBJDIR)

EOF

echo 'Successfully created Makefile for customized user code'
